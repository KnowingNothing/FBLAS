/**
    FBLAS: BLAS implementation for Intel FPGA
    Copyright (c) 2019 ETH-Zurich. All rights reserved.
    See LICENSE for license information.

    Constants used by module generators

*/

#include "../../include/generator/module_generator.hpp"
#include "../../include/commons.hpp"
const std::string ModuleGenerator::k_generated_file_header_="//File automatically generated by Module Generator";
const std::string ModuleGenerator::k_skeleton_folder_=std::string(BASE_FOLDER)+std::string("/blas/");
const std::string ModuleGenerator::k_double_precision_define_="#define DOUBLE_PRECISION";
const std::string ModuleGenerator::k_width_define_="#define W ";
const std::string ModuleGenerator::k_ctile_rows_define_="#define CTILE_ROWS ";
const std::string ModuleGenerator::k_ctile_cols_define_="#define CTILE_COLS ";
const std::string ModuleGenerator::k_tile_n_size_define_="#define TILE_N ";
const std::string ModuleGenerator::k_tile_m_size_define_="#define TILE_M ";
const std::string ModuleGenerator::k_mtile_size_define_="#define MTILE ";
const std::string ModuleGenerator::k_kernel_name_define_ = "#define KERNEL_NAME ";
const std::string ModuleGenerator::k_channel_x_define_="#define CHANNEL_VECTOR_X ";
const std::string ModuleGenerator::k_channel_y_define_="#define CHANNEL_VECTOR_Y ";
const std::string ModuleGenerator::k_channel_x_trans_define_="#define CHANNEL_VECTOR_X_TRANS ";
const std::string ModuleGenerator::k_channel_y_trans_define_="#define CHANNEL_VECTOR_Y_TRANS ";
const std::string ModuleGenerator::k_channel_x_trsv_define_="#define CHANNEL_VECTOR_X ";
const std::string ModuleGenerator::k_channel_matrix_A_define_="#define CHANNEL_MATRIX_A ";
const std::string ModuleGenerator::k_channel_matrix_A2_define_="#define CHANNEL_MATRIX_A2 ";
const std::string ModuleGenerator::k_channel_matrix_B_define_="#define CHANNEL_MATRIX_B ";
const std::string ModuleGenerator::k_channel_matrix_B2_define_="#define CHANNEL_MATRIX_B2 ";
const std::string ModuleGenerator::k_channel_scalar_out_define_="#define CHANNEL_OUT ";
const std::string ModuleGenerator::k_channel_vector_out_define_="#define CHANNEL_VECTOR_OUT ";
const std::string ModuleGenerator::k_channel_vector_out_x_define_="#define CHANNEL_VECTOR_OUT_X ";
const std::string ModuleGenerator::k_channel_vector_out_y_define_="#define CHANNEL_VECTOR_OUT_Y ";
const std::string ModuleGenerator::k_channel_matrix_out_define_="#define CHANNEL_MATRIX_OUT ";
const std::string ModuleGenerator::k_stratix_10_platform_define_="#define __STRATIX_10__";
const std::string ModuleGenerator::k_arria_10_platform_define_="#define __ARRIA_10__";
const std::string ModuleGenerator::k_commons_define_="#include <commons.h>";
const std::string ModuleGenerator::k_incx_define_="#define INCX ";
const std::string ModuleGenerator::k_incy_define_="#define INCY ";
const std::string ModuleGenerator::k_incw_define_="#define INCW ";
const std::string ModuleGenerator::k_channel_enable_define_="#pragma OPENCL EXTENSION cl_intel_channels : enable";


const std::map<std::string,std::string> ModuleGenerator::k_helper_files_= {{"read vector x", "/helpers/read_vector_x.cl"},{"read vector y","/helpers/read_vector_y.cl"},
                                                                        {"write scalar", "/helpers/write_scalar.cl"},{"write vector","/helpers/write_vector.cl"}};
